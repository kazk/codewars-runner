"use strict";

const fs = require('fs-extra');
const path = require('path');

const defaultOptions = {
  timeout: 15000,
};

async function solutionOnly(opts) {
  const filename = path.join(opts.dir, 'code.go');
  await fs.outputFile(filename, opts.solution);
  return {
    name: 'go',
    args: ['run', filename]
  };
}

async function testIntegration(opts) {
  const pkgName = getPackageName(opts.solution);
  const name = pkgName[0].toUpperCase() + pkgName.slice(1);
  const dir = `/home/codewarrior/go/src/codewarrior/${pkgName}`;
  await fs.outputFile(path.join(dir, 'solution.go'), opts.solution);
  if (opts.setup) await fs.outputFile(path.join(dir, 'setup.go'), opts.setup);
  await fs.outputFile(path.join(dir, `${pkgName}_test.go`), opts.fixture);
  await fs.outputFile(path.join(dir, `${pkgName}_suite_test.go`), [
    `package ${pkgName}_test`,
    `import (`,
    `  . "github.com/onsi/ginkgo"`,
    `  . "github.com/onsi/gomega"`,
    `  "testing"`,
    `  "codewars/reporter"`,
    `)`,
    ``,
    `func Test${name}(t *testing.T) {`,
    `  RegisterFailHandler(Fail)`,
    `  RunSpecsWithCustomReporters(t, "${name} Test", []Reporter{reporter.New()})`,
    '}'
  ].join('\n'));

  return {
    name: 'go',
    args: ['test'],
    options: {
      cwd: dir,
      env: Object.assign({}, process.env, {
        // append the directory to $GOPATH so the test can
        // use the import path "codewarrior/pakage" for arbitrary package name
        GOPATH: `${process.env.GOPATH}:/home/codewarrior/go`
      })
    }
  };
}

function transformBuffer(buffer, opts) {
  if (buffer.stdout) buffer.stdout = sanitizeStdOut(buffer.stdout, opts);
}

// remove last few lines generated by 'testing'
// PASS
// ok  	{dirname of test file}	{seconds}s
//
// --- FAIL: {Test Suite} ({seconds}s)
// FAIL
// exit status 1
// FAIL	{dirname of test file}	{seconds}s
function sanitizeStdOut(stdout) {
  // special case when build failed
  if (stdout.includes('[build failed]')) return '\n<ERROR::>Build Failed\n';
  const ss = stdout.split('\n'), n = ss.length;
  for (let i = n - 1; i >= 0; --i) {
    const s = ss[i];
    if (s == 'PASS' || s.startsWith('--- FAIL'))
      return ss.slice(0, i).join('\n') + '\n';
  }
  return stdout;
}

function getPackageName(code) {
  const m = code.match(/^package\s+([a-z][a-z\d]*)\s*$/m);
  if (m === null) throw new Error("Failed to extract package name. A package name MUST be lowercased.");
  return m[1];
}
